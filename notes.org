#+BEGIN_COMMENT
/* vim: set ts=2 tw=72: */
#+END_COMMENT

#+TITLE: K4: A Language for Correctness in Small Spaces
#+OPTIONS: toc:2

K4 is a toy language being built to explore concepts relating to the
mechanics of writing a compile, while simultaneously being a vehicle and
excuse to learn more about type and category theory, and also just being
an excuse to exercise math muscles that yearn to do work.

* Precepts

  1) Programs should be an expression of a solution, algorithm, or goal,
     and not an bit-banging explanation of how to acheive it.
  2) Programs should be assumed to run on memory and power constrained
     devices.

* Features

  - Algebreic data types, _i.e._ record and sum and ~match~
  - Logic/Constraint programming
  - Dependent types
  - Linear types
  - Trait-based composition
  
  Given the limitations of the size of the output and processing power,
  the compiler will be responsible for applying as much knowlege and
  simplifications as possible at compile time -- defining how that will
  work will by far be the most difficult part of this project.  I'm
  expecting a good portion of the language specification to be the
  mathemetical reasoning that can be applied to the program to simplify
  the outputed machine code.

* Limitations

  - Static, compile-time memory managment
  - Recursion must be provably finite and happen via tail-calls
  - Maximum stack depth checked at compile time. (May help be alleviated
    by cross-function register allocation or heap allocation for
    functions only appearing once in the call tree.)

* Built-in Types
* Algebreic Data Types
** Records
** Sums
* Logic Programming
** Facts
** Rules
* Dependent Types
** Arrays
** Recursion
* Generics
** Invarient Size
** Dependent Size
* Linear Types

