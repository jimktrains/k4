struct Node{S(i), T}:
  enum $ChildNode:
    Empty := 0x0
    Node(Node{i, Node{T}}):= 0x1

  enum $Value:
    Empty := 0x0
    Value(T) := 0x1

   enum $SearchResult:
    NotFound := 0x0
    Found(T) := 0x1

struct Node{S(i), T}:
  $ChildNode left
  $ChildNode right

  $Value value

struct Node{0, T}:
  left  := $ChildNode.Empty
  right := $ChildNode.Empty

  $Value value

trait BinaryTreeFind for Node{i, T}$ChildNode.Node([value := $Value.Empty]):
  find(T value) := $SearchResult.NotFound

trait BinaryTreeFind for Node{i, T}$ChildNode.Empty:
  find(T value) := $SearchResult.NotFound

trait BinaryTreeFind for Node{i, T}$ChildNode.Node:
  find(T value) -> $SearchResult:
      return match this.value <=> value:
          Eq -> return $SearchResult.Found(value)
          Lt -> return this.left.find(value)
           Gt -> return this.right.find(value)

# A
def bubble_sort(mut []) -> pass
def bubble_sort(mut [@rest, x]):
    bubble_partial_sort([rest, x])
    bubble_sort(rest)

def bubble_partial_sort(mut [@rest, x, y]):
    if x > y -> swap x y
    bubble_partial_sort([rest, x])
def bubble_partial_sort(mut [x]) -> pass
def bubble_partial_sort(mut []) -> pass
